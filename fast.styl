/*
 *
 * Fast.styl
 * "Short and fast syntax for your css stylus projects"
 *
 * By: Raúl Hernández
 * Twitter: @raulghm
 * Support: https://github.com/raulghm/Fast.styl
 *
 * --------------------------------------------------------------------
 */


/*
	EXAMPLE

	From:

		.myClass
			c red
			lh 1em
			bgc blue
			d b
			m 0 5 8 10

	Result:

		.myClass {
			color: red;
			line-height: 1em;
			background-color: blue;
			display: block;
			margin: 0 5px 8px 10px;
		}

 * --------------------------------------------------------------------
 */


/*
	CONTENT
	References from: http://www.w3schools.com/cssref/default.asp

		Animation
		Background
		Border and outline
		Box
		Color
		Content Paged Media
		Dimension
		Flexible Box
		Font
		Generated content
		Grid
		Hyperlink
		Linebox
		List
		Margin
		Marquee
		Multi-column
		Padding
		Paged Media
		Positioning
		Print
		Ruby
		Speech
		Table
		Text
		2D/3D Transform
		Transition
		User-interface

 * --------------------------------------------------------------------
 */

/*
 * --------------------------------------------------------------------
 * Animation Properties
 * --------------------------------------------------------------------
 */

// animation
an(v)
	animation v

 // @keyframes
 // animation
 // animation-name
 // animation-duration
 // animation-timing-function
 // animation-delay
 // animation-iteration-count
 // animation-direction
 // animation-play-state

/*
 * --------------------------------------------------------------------
 * Background
 * --------------------------------------------------------------------
 */

// background
bg(v)
if v == a
	background auto
else if v == t
	background transparent
else if v == n
	background none
else
	background v

// background-image
bgi(v)
if v == n
	background-image none
else
	background-image url(v)

// background-repeat
bgr(v)
background-repeat v

// background-color
bgc(v, im = '')
im = im == i ? !important :
if v == t
	background transparent im
else
	background-color v im

// background-size
bgz(v)
background-size v


/*
 * --------------------------------------------------------------------
 * Border and outline
 * --------------------------------------------------------------------
 */

// border
bd(v)
	if v == n
		border none
	else
		border v

// border-top
bdt(v)
	border-top v

// border-right
bdr(v)
	border-right v

// border-left
bdl(v)
	border-left v

// border-bottom
bdb(v)
	border-bottom v

// border-color
bdc(v)
	border-color v

// border-radius
bdrz(v)
	border-radius v

// box-shadow
bs(v)
	box-shadow v


/*
 * --------------------------------------------------------------------
 * Box
 * --------------------------------------------------------------------
 */

// overflow
ov(v)
	if v == h
		overflow hidden
	else if v == v
		overflow visible
	else
		overflow v
// overflow-x
// overflow-y
// overflow-style
// rotation
// rotation-point

/*
 * --------------------------------------------------------------------
 * Color
 * --------------------------------------------------------------------
 */

// opacity
op(v)
	opacity v

// color-profile
// rendering-intent


/*
 * --------------------------------------------------------------------
 * Content Paged Media
 * --------------------------------------------------------------------
 */

// bookmark-label
// bookmark-level
// bookmark-target
// float-offset
// hyphenate-after
// hyphenate-before
// hyphenate-character
// hyphenate-lines
// hyphenate-resource
// hyphens
// image-resolution
// marks
// string-set

/*
 * --------------------------------------------------------------------
 * Dimension Properties
 * --------------------------------------------------------------------
 */

// height
h(v)
	if v == n
		height none

	else if v == a
		height auto

	else if v == i
		height inherit

	else
		unit = unit(v) == '' ? 'px' : unit(v)
		height unit(v, unit)

// min-height
mih(v)
	if v == n
		min-height none

	else if v == a
		min-height auto

	else if v == i
		min-height inherit

	else
		unit = unit(v) == '' ? 'px' : unit(v)
		min-height unit(v, unit)

// max-height
mah(v)
	if v == n
		max-height none

	else if v == a
		max-height auto

	else if v == i
		max-height inherit

	else
		unit = unit(v) == '' ? 'px' : unit(v)
		max-height unit(v, unit)

// width
w(v)
	if v == n
		width none

	else if v == a
		width auto

	else
		unit = unit(v) == '' ? 'px' : unit(v)
		width unit(v, unit)

// min-width
miw(v)
	if v == none
		min-width none

	else if v == a
		min-width auto
		maw

	else
		unit = unit(v) == '' ? 'px' : unit(v)
		min-width unit(v, unit)

// max-width
maw(v)
	if v == n
		max-width none

	else if v == a
		max-width auto
		maw

	else
		unit = unit(v) == '' ? 'px' : unit(v)
		max-width unit(v, unit)


// Mixin: Size
// Quickly and smoothly set width and height.
// ex. size: 50px 100px => width: 50px; height: 100px
// ex. size: 2em => width: 2em; height: 2em;
// ex. size: 40 80 => width: 40px; height: 80px
size(numbers...)
	if length(numbers) > 1

		width-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		height-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])

		width:  unit(numbers[0], width-unit)
		height: unit(numbers[1], height-unit)
	else
		size-unit = unit(numbers) == '' ? 'px' : unit(numbers)

		width:  unit(numbers, size-unit)
		height: unit(numbers, size-unit)


/*
 * --------------------------------------------------------------------
 * Flexible Box
 * --------------------------------------------------------------------
 */

// box-align
// box-direction
// box-flex
// box-flex-group
// box-lines
// box-ordinal-group
// box-orient
// box-pack

/*
 * --------------------------------------------------------------------
 * Font
 * --------------------------------------------------------------------
 */

// font
f(v)
	font v

// font-family
ff(v)
	font-family v

// font-weight
fw(v)
	font-weight v

// font-style
fs(v)
	if v == i
		font-style i
	else if v == n
		font-style normal
	else
		font-style v

// font-variant
// @font-face
// font-size-adjust
// font-stretch

// font-size
fz(v)
	font-size v

/*
 * --------------------------------------------------------------------
 * Generated Content
 * --------------------------------------------------------------------
 */

// content
con($v)
	content '$v'
// counter-increment
// counter-reset
// quotes
// crop
// move-to
// page-policy

/*
 * --------------------------------------------------------------------
 * Grid
 * --------------------------------------------------------------------
 */

// grid-columns
// grid-rows

/*
 * --------------------------------------------------------------------
 * Hyperlink
 * --------------------------------------------------------------------
 */

// target
// target-name
// target-new
// target-position

/*
 * --------------------------------------------------------------------
 * Linebox
 * --------------------------------------------------------------------
 */

// alignment-adjust
// alignment-baseline
// baseline-shift
// dominant-baseline
// drop-initial-after-adjust
// drop-initial-after-align
// drop-initial-before-adjust
// drop-initial-before-align
// drop-initial-size
// drop-initial-value
// inline-box-align
// line-stacking
// line-stacking-ruby
// line-stacking-shift
// line-stacking-strategy
// text-height

/*
 * --------------------------------------------------------------------
 * List
 * --------------------------------------------------------------------
 */

// list-style
lis(v)
	if v == n
		list-style none
	else
		list-style v

// list-style-image
// list-style-position
// list-style-type

/*
 * --------------------------------------------------------------------
 * Margin
 * --------------------------------------------------------------------
 */

 // example:
 // m 10 20 30 40 // margin 10px 20px 30px 40px
 // m 10px 20px // margin 10px 20px
 // m 10px // margin 10px

m(numbers...)

	if length(numbers) == 2

		// if (numbers[0] == 'a')
		top-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		right-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])

		margin: unit(numbers[0], top-unit) unit(numbers[1], right-unit)

	else if length(numbers) == 3

		top-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		right-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])
		bottom-unit = unit(numbers[2]) == '' ? 'px' : unit(numbers[2])

		margin: unit(numbers[0], top-unit) unit(numbers[1], right-unit) unit(numbers[2], bottom-unit)

	else if length(numbers) == 4

		top-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		right-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])
		bottom-unit = unit(numbers[2]) == '' ? 'px' : unit(numbers[2])
		left-unit = unit(numbers[3]) == '' ? 'px' : unit(numbers[3])

		margin: unit(numbers[0], top-unit) unit(numbers[1], right-unit) unit(numbers[2], bottom-unit) unit(numbers[3], left-unit)

	else
		size-unit = unit(numbers) == '' ? 'px' : unit(numbers)
		margin: unit(numbers, size-unit)

// example:
// mt 10 // margin-top 10px
// mr 10pt // margin-right 10pt
// mb 10% // margin-bottom 10%

// margin-top
mt(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	margin-top unit(v, unit)

// margin-right
mr(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	margin-right unit(v, unit)

// margin-bottom
mb(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	margin-bottom unit(v, unit)

// margin-left
ml(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	margin-left unit(v, unit)

/*
 * --------------------------------------------------------------------
 * Marquee
 * --------------------------------------------------------------------
 */

// marquee-direction
// marquee-play-count
// marquee-speed
// marquee-style

/*
 * --------------------------------------------------------------------
 * Multi-column
 * --------------------------------------------------------------------
 */

// column-count
// column-fill
// column-gap
// column-rule
// column-rule-color
// column-rule-style
// column-rule-width
// column-span
// column-width
// columns


/*
 * --------------------------------------------------------------------
 * Padding
 * --------------------------------------------------------------------
 */

 // example:
 // p 10 20 30 40 // padding 10px 20px 30px 40px
 // p 10px 20px // paffing 10px 20px
 // p 10px // padding 10px

p(numbers...)

	if length(numbers) == 2

		top-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		right-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])

		padding: unit(numbers[0], top-unit) unit(numbers[1], right-unit)

	else if length(numbers) == 3

		top-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		right-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])
		bottom-unit = unit(numbers[2]) == '' ? 'px' : unit(numbers[2])

		padding: unit(numbers[0], top-unit) unit(numbers[1], right-unit) unit(numbers[2], bottom-unit)

	else if length(numbers) == 4

		top-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		right-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])
		bottom-unit = unit(numbers[2]) == '' ? 'px' : unit(numbers[2])
		left-unit = unit(numbers[3]) == '' ? 'px' : unit(numbers[3])

		padding: unit(numbers[0], top-unit) unit(numbers[1], right-unit) unit(numbers[2], bottom-unit) unit(numbers[3], left-unit)

	else
		size-unit = unit(numbers) == '' ? 'px' : unit(numbers)
		padding: unit(numbers, size-unit)


// example:
// pt 10 // padding-top 10px
// pr 10pt // padding-right 10pt
// pb 10% // padding-bottom 10%

// padding-top
pt(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	padding-top unit(v, unit)

// padding-right
pr(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	padding-right unit(v, unit)

// padding-bottom
pb(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	padding-bottom unit(v, unit)

// padding-left
pl(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	padding-left unit(v, unit)

/*
 * --------------------------------------------------------------------
 * Paged Media
 * --------------------------------------------------------------------
 */

// fit
// fit-position
// image-orientation
// page
// size

/*
 * --------------------------------------------------------------------
 * Positiong
 * --------------------------------------------------------------------
 */

// bottom
// clear
// clip
// cursor
// display
// float
// left
// overflow
// position
// right
// top
// visibility
// z-index

// position
// pos r -> position relative
// pos a -> position absolute
// pos f -> position fixed
// pos s -> position static
pos(v)
	if v == r
		position relative
	else if v == a
		position absolute
	else if v == f
		position fixed
	else if v == s
		position static
	else
		position v

// clear
// cl b -> clear both
// cl n -> clear none
// cl l -> clear left
// cl r -> clear right
cl(v)
	if v == b
		clear both
	else if v == n
		clear none
	else if v == l
		clear left
	else if v == r
		clear right
	else
		clear v

// clip
// cp a -> clip auto
cp(v)
	if v == a
		clip auto
	else
		clip v

// cursor
// cur a -> cursor auto
// cur p -> cursor pointer
// cur d -> cursor default
// cur c -> cursor crosshair
// cur ha -> cursor hand
// cur he -> cursor help
// cur m -> cursor move
// cur t -> cursor text
cur(v)
	if v == p
		cursor pointer
	else if v == a
		cursor auto
	else if v == d
		cursor default
	else if v == c
		cursor crosshair
	else if v == ha
		cursor hand
	else if v == he
		cursor help
	else if v == m
		cursor move
	else if v == t
		cursor text
	else
		cursor v

// display
// d b -> display block
// d n -> display none
// d b -> display block
// d i -> display inline
// d ib -> display inline-block
// d li -> display list-item
// d ri -> display run-in
// d cp -> display compact
// d tb -> display table
// d itb -> display inline-table
// d tbcp -> display table-caption
// d tbcl -> display table-column
// d tbclg -> display table-column-group
// d tbhg -> display table-header-group
// d tbfg -> display table-footer-group
// d tbr -> display table-row
// d tbrg -> display table-row-group
// d tbc -> display table-cell
// d rb -> display ruby
// d rbb -> display ruby-base
// d rbbg -> display ruby-base-group
// d rbt -> display ruby-text
// d rbtg -> display ruby-text-group
d(v)
	if v == b
		display block
	else if v == ib
		display inline-block
	else if v == i
		display inline
	else if v == n
		display none
	else if v == t
		display table
	else if v == box
		// Firefox
		display -moz-box
		// Safari, Opera, and Chrome
		display -webkit-box
		// W3C
		display box
	else
		display v

// float
// fl l -> float left
// fl r -> float right
// fl n -> float none
fl(v)
	if v == l
		float left
	else if v == r
		float right
	else if v == n
		float none
	else
		float v


// left
l(v)
	if v == a
		left auto
	else
		unit = unit(v) == '' ? 'px' : unit(v)
		left unit(v, unit)

// right
r(v)
	if v == a
		right auto
	else
		unit = unit(v) == '' ? 'px' : unit(v)
		right unit(v, unit)

// top
t(v)
	if v == a
		top auto
	else
		unit = unit(v) == '' ? 'px' : unit(v)
		top unit(v, unit)

// bottom
b(v)
	if v == a
		bottom auto
	else
		unit = unit(v) == '' ? 'px' : unit(v)
		bottom unit(v, unit)

// visibility
// v v -> visibility visible
// v h -> visibility hidden
// v c -> visibility collapse
v($v, im = '')
	im = im == i ? !important :

	if $v == v
		visibility visible im
	else if $v == h
		visibility hidden im
	else if $v == c
		visibility collapse im
	else
		visibility $v im

// z-index
// z 1000 -> z-index 1000
// z 1000 i -> z-index 1000 !important
// z a -> z-index auto
z(v, im = '')
	im = im == i ? !important :
	if v == a
		z-index auto im
	else
		z-index v

/*
 * --------------------------------------------------------------------
 * Print
 * --------------------------------------------------------------------
 */

// orphans
// page-break-after
// page-break-before
// page-break-inside
// widows

/*
 * --------------------------------------------------------------------
 * Ruby
 * --------------------------------------------------------------------
 */

// ruby-align
// ruby-overhang
// ruby-position
// ruby-span

/*
 * --------------------------------------------------------------------
 * Speech
 * --------------------------------------------------------------------
 */

// mark
// mark-after
// mark-before
// phonemes
// rest
// rest-after
// rest-before
// voice-balance
// voice-duration
// voice-pitch
// voice-pitch-range
// voice-rate
// voice-stress
// voice-volume

/*
 * --------------------------------------------------------------------
 * Table
 * --------------------------------------------------------------------
 */

// border-collapse
// border-spacing
// caption-side
// empty-cells
// table-layout

 /*
 * --------------------------------------------------------------------
 * Text
 * --------------------------------------------------------------------
 */

// color
c($v)
	color $v

// direction
di($v)
	direction $V

// letter-spacing
ls($v)
	letter-spacing $v

// text-align
ta($v)
	if $v == l
		text-align left
	else if $v == r
		text-align right
	else if $v == c
		text-align center
	else
		text-align $v

// text-decoration
td($v)
	if $v == n
		text-decoration none
	else if $v == u
		text-decoration underline
	else if $v == o
		text-decoration overline
	else if $v == l
		text-decoration line-through
	else
		text-decoration $v

// line-height
lh($v)
	if $v == i
		line-height inherit
	else
		line-height $v

// text-indent
ti($v)
	text-indent $v

// text-transform
tt($v)
	if $v == u
		text-transform uppercase
	else if $v == l
		text-transform lowercase
	else
		text-transform $v

// unicode-bidi

// vertical-align
va($v)
	if $v == t
		vertical-align top
	else if $v == m
		vertical-align middle
	else if $v == b
		vertical-align bottom
	else
		vertical-align $v

// white-space
ws($v)
	white-space $v

// word-spacing
wos($v)
	word-spacing $v

// hanging-punctuation
// punctuation-trim
// text-justify
// text-outline
// text-overflow

// text-shadow
tsh($v)
	text-shadow $v

// text-wrap

// word-break
wb($v)
	word-break $v

// word-wrap
ww($v)
	word-wrap $v


/*
 * --------------------------------------------------------------------
 * 2D/3D Transform
 * --------------------------------------------------------------------
 */

// transform
// transform-origin
// transform-style
// perspective
// perspective-origin
// backface-visibility


/*
 * --------------------------------------------------------------------
 * Transition
 * --------------------------------------------------------------------
 */

// transition
tra(v)
	transition v
// transition-property
// transition-duration
// transition-timing-function
// transition-delay

/*
 * --------------------------------------------------------------------
 * User-interface
 * --------------------------------------------------------------------
 */

// appearance
// box-sizing
// icon
// nav-down
// nav-index
// nav-left
// nav-right
// nav-up
// outline-offset
// resize


