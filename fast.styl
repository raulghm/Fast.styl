// Animation
// Background
// Border and outline
// Box
// Color
// Content Paged Media
// Dimension
// Flexible Box
// Font
// Generated content
// Grid
// Hyperlink
// Linebox
// List
// Margin
// Marquee
// Multi-column
// Padding
// Paged Media
// Positioning
// Print
// Ruby
// Speech
// Table


//*******************//
//      Text
//*******************//

// color
c(v)
	color v

// direction
// letter-spacing
// line-height
lh(v)
	line-height v
// text-align
// text-decoration
td(v)
	if v == n
		text-decoration none
	else if v == u
		text-decoration underline
	else if v == o
		text-decoration overline
	else if v == l
		text-decoration line-through
	else
		text-decoration v

// lh": "line-height:|;",
lh(v)
	if v == i
		line-height inherit
	else
		line-height v

// text-indent
// text-transform
tt(v)	
	if v == u
		text-transform uppercase
	else if v == l
		text-transform lowercase
	else
		text-transform v
// unicode-bidi
// vertical-align
// white-space
// word-spacing
// hanging-punctuation
// punctuation-trim	
// text-align-last
ta(v)
	if v == l
		text-align left
	else if v == r
		text-align right
	else if v == c
		text-align center
	else
		text-align v

// text-justify	
// text-outline
// text-overflow
// text-shadow
// text-wrap	
// word-break
// word-wrap	





// 2D/3D Transform
// Transition
// User-interface


// Animation

//*******************//
//      Background
//*******************//

bg(v)
	if v == a
		background auto
	else if v == t
		background transparent
	else if v == n
		background none
	else
		background v

bgi(v)	
	if v == n
		background-image none
	else
		background-image url(v)

bgr(v)
	background-repeat v

bgc(v, im = '')
	im = im == i ? !important :
	if v == t
		background transparent im
	else
		background-color v im

bgz(v)
	background-size v

// bg: background
// bg+: background:${1:#fff} url(${2}) ${3:0} ${4:0} ${5:no-repeat}
// bg:n: background:none
// bg:ie: filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='${1:x}.png',sizingMethod='${2:crop}')
// bgc: background-color:#${1:fff}
// bgc:t: background-color:transparent
// bgi: background-image:url(|)
// bgi:n: background-image:none
// bgr: background-repeat
// bgr:n: background-repeat:no-repeat
// bgr:x: background-repeat:repeat-x
// bgr:y: background-repeat:repeat-y
// bgr:sp: background-repeat:space
// bgr:rd: background-repeat:round
// bga: background-attachment
// bga:f: background-attachment:fixed
// bga:s: background-attachment:scroll
// bgp: background-position:${1:0} ${2:0}
// bgpx: background-position-x
// bgpy: background-position-y
// bgbk: background-break
// bgbk:bb: background-break:bounding-box
// bgbk:eb: background-break:each-box
// bgbk:c: background-break:continuous
// bgcp: background-clip:${1:padding-box}
// bgcp:bb: background-clip:border-box
// bgcp:pb: background-clip:padding-box
// bgcp:cb: background-clip:content-box
// bgcp:nc: background-clip:no-clip
// bgo: background-origin
// bgo:pb: background-origin:padding-box
// bgo:bb: background-origin:border-box
// bgo:cb: background-origin:content-box
// bgsz: background-size
// bgsz:a: background-size:auto
// bgsz:ct: background-size:contain
// bgsz:cv: background-size:cover

//*******************//
// Border and outline
//*******************//

// bd: border
bd(v)
	// bd:n: border:none
	if v == n
		border none
	else
		border v

// bdt: border-top
bdt(v)
	border-top v

// bdr: border-right
bdr(v)
	border-right v

// bdl: border-left
bdl(v)
	border-left v 

// bdb: border-bottom
bdb(v)
	border-bottom v

// bdc: border-color:#${1:000}
bdc(v)
	border-color v


// Box


//*******************//
//      Color
//*******************//

op(v)
	opacity v 



// Content Paged Media

//*******************//
//      Dimension
//*******************//

// "h": "height
h(v)
	if v == n
		height none

	else if v == a
		height auto

	else if v == i
		height inherit

	else
		unit = unit(v) == '' ? 'px' : unit(v)
		height unit(v, unit)

mih(v)
	if v == n
		min-height none

	else if v == a
		min-height auto

	else if v == i
		min-height inherit

	else
		unit = unit(v) == '' ? 'px' : unit(v)
		min-height unit(v, unit)

mah(v)
	if v == n
		max-height none

	else if v == a
		max-height auto

	else if v == i
		max-height inherit

	else
		unit = unit(v) == '' ? 'px' : unit(v)
		max-height unit(v, unit)

// "w": "width
w(v)
	if v == n
		width none

	else if v == a
		width auto

	else
		unit = unit(v) == '' ? 'px' : unit(v)
		width unit(v, unit)

miw(v)
	if v == n
		min-width none

	else if v == a
		min-width auto
		maw

	else
		unit = unit(v) == '' ? 'px' : unit(v)
		min-width unit(v, unit)

maw(v)
	if v == n
		max-width none

	else if v == a
		max-width auto
		maw

	else
		unit = unit(v) == '' ? 'px' : unit(v)
		max-width unit(v, unit)


// Mixin: Size
// Quickly and smoothly set width and height.
// ex. size: 50px 100px => width: 50px; height: 100px
// ex. size: 2em => width: 2em; height: 2em;
// ex. size: 40 80 => width: 40px; height: 80px
size(numbers...)
	if length(numbers) > 1

		width-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		height-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])

		width:  unit(numbers[0], width-unit)
		height: unit(numbers[1], height-unit)
	else
		size-unit = unit(numbers) == '' ? 'px' : unit(numbers)

		width:  unit(numbers, size-unit)
		height: unit(numbers, size-unit)


// Flexible Box


//*******************//
//      Font
//*******************//

f(v)
	font v

ff(v)
	font-family v

fw(v)
	font-weight v

fs(v)
	font-style v

fz(v)
	font-size v



// Generated content
// Grid
// Hyperlink
// Linebox


//*******************//
//      List
//*******************//

// list-style
lis(v)
	list-style v

//*******************//
//      Margin
//*******************//

// complete values
//****************//

// example:
// m 10 20 30 40 // margin 10px 20px 30px 40px
// m 10px 20px // margin 10px 20px
// m 10px // margin 10px

m(numbers...)  

	if length(numbers) == 2

		top-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		right-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])

		margin: unit(numbers[0], top-unit) unit(numbers[1], right-unit)

	else if length(numbers) == 3

		top-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		right-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])
		bottom-unit = unit(numbers[2]) == '' ? 'px' : unit(numbers[2])

		margin: unit(numbers[0], top-unit) unit(numbers[1], right-unit) unit(numbers[2], bottom-unit)

	else if length(numbers) == 4

		top-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		right-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])
		bottom-unit = unit(numbers[2]) == '' ? 'px' : unit(numbers[2])
		left-unit = unit(numbers[3]) == '' ? 'px' : unit(numbers[3])

		margin: unit(numbers[0], top-unit) unit(numbers[1], right-unit) unit(numbers[2], bottom-unit) unit(numbers[3], left-unit)

	else
		size-unit = unit(numbers) == '' ? 'px' : unit(numbers)
		margin: unit(numbers, size-unit)

// specific values
//****************//

// example:
// mt 10 // margin-top 10px
// mr 10pt // margin-right 10pt
// mb 10% // margin-bottom 10%

mt(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	margin-top unit(v, unit)

mr(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	margin-right unit(v, unit)

mb(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	margin-bottom unit(v, unit)

ml(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	margin-left unit(v, unit)

// Marquee
// Multi-column


//*******************//
//      Padding
//*******************//

// complete values
//****************//

// example:
// p 10 20 30 40 // padding 10px 20px 30px 40px
// p 10px 20px // paffing 10px 20px
// p 10px // padding 10px

p(numbers...)  

	if length(numbers) == 2

		top-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		right-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])

		padding: unit(numbers[0], top-unit) unit(numbers[1], right-unit)

	else if length(numbers) == 3

		top-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		right-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])
		bottom-unit = unit(numbers[2]) == '' ? 'px' : unit(numbers[2])

		padding: unit(numbers[0], top-unit) unit(numbers[1], right-unit) unit(numbers[2], bottom-unit)

	else if length(numbers) == 4

		top-unit  = unit(numbers[0]) == '' ? 'px' : unit(numbers[0])
		right-unit = unit(numbers[1]) == '' ? 'px' : unit(numbers[1])
		bottom-unit = unit(numbers[2]) == '' ? 'px' : unit(numbers[2])
		left-unit = unit(numbers[3]) == '' ? 'px' : unit(numbers[3])

		padding: unit(numbers[0], top-unit) unit(numbers[1], right-unit) unit(numbers[2], bottom-unit) unit(numbers[3], left-unit)

	else
		size-unit = unit(numbers) == '' ? 'px' : unit(numbers)
		padding: unit(numbers, size-unit)


// specific values
//****************//

// example:
// pt 10 // padding-top 10px
// pr 10pt // padding-right 10pt
// pb 10% // padding-bottom 10%

pt(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	padding-top unit(v, unit)

pr(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	padding-right unit(v, unit)

pb(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	padding-bottom unit(v, unit)

pl(v)
	unit = unit(v) == '' ? 'px' : unit(v)
	padding-left unit(v, unit)

// Paged Media

//**************************//
//      Positioning
//**************************//

pos(v)
	if v == r
		position relative
	else if v == a
		position absolute
	else if v == f
		position fixed
	else if v == s
		position static
	else 
		position v

//clear
// "cl": "clear:${1:both};",
// "cl:n": "clear:none;",
// "cl:l": "clear:left;",
// "cl:r": "clear:right;",
// "cl:b": "clear:both;",
cl(v)
	if v == b
		clear both
	else if v == n
		clear none
	else if v == l
		clear left
	else if v == r
		clear right
	else
		clear v

// clip
// "cp": "clip:|;",
// "cp:a": "clip:auto;",
// "cp:r": "clip:rect(${1:top} ${2:right} ${3:bottom} ${4:left});",
cp(v)
	if v == a
		clip auto
	else
		clip v

// cursor
// cur": "cursor:${pointer};",
// cur:a": "cursor:auto;",
// cur:d": "cursor:default;",
// cur:c": "cursor:crosshair;",
// cur:ha": "cursor:hand;",
// cur:he": "cursor:help;",
// cur:m": "cursor:move;",
// cur:p": "cursor:pointer;",
// cur:t": "cursor:text;",
cur(v)
	if v == p
		cursor pointer
	else if v == a
		cursor auto
	else if v == d
		cursor default
	else if v == c
		cursor crosshair
	else if v == ha
		cursor hand
	else if v == he
		cursor help
	else if v == m
		cursor move
	else if v == t
		cursor text
	else
		cursor v

// display
// "d": "display:${1:block};",
// "d:n": "display:none;",
// "d:b": "display:block;",
// "d:i": "display:inline;",
// "d:ib": "display:inline-block;",
// "d:li": "display:list-item;",
// "d:ri": "display:run-in;",
// "d:cp": "display:compact;",
// "d:tb": "display:table;",
// "d:itb": "display:inline-table;",
// "d:tbcp": "display:table-caption;",
// "d:tbcl": "display:table-column;",
// "d:tbclg": "display:table-column-group;",
// "d:tbhg": "display:table-header-group;",
// "d:tbfg": "display:table-footer-group;",
// "d:tbr": "display:table-row;",
// "d:tbrg": "display:table-row-group;",
// "d:tbc": "display:table-cell;",
// "d:rb": "display:ruby;",
// "d:rbb": "display:ruby-base;",
// "d:rbbg": "display:ruby-base-group;",
// "d:rbt": "display:ruby-text;",
// "d:rbtg": "display:ruby-text-group;",
d(v)
	if v == b
		display block
	else if v == ib
		display inline-block
	else if v == i
		display inline
	else if v == n
		display none
	else if v == box
		// Firefox
		display -moz-box 
		// Safari, Opera, and Chrome
		display -webkit-box
		// W3C
		display box 
	else
		display v

// float
// "fl:l": "float:left;",
// "fl:r": "float:right;",
// "fl:n": "float:none;",
fl(v)
	if v == l
		float left
	else if v == r
		float right
	else if v == n
		float none
	else
		float v

// left
l(v = false)
	if v == a
		left auto
	else
		left v
// overflow
ov(v)
	if v == h 
		overflow hidden
	else
		overflow v
// position

// right
r(v)
	if v == a
		right auto
	else
		right v

// top
t(v)
	if v == a
		top auto
	else
		top v

// bottom
b(v)
	if v == a
		bottom auto
	else
		bottom v

// visibility
// "v:v": "visibility:visible;",
// "v:h": "visibility:hidden;",
// "v:c": "visibility:collapse;",
v(val, im = '')
	im = im == i ? !important :

	if val == v
		visibility visible im
	else if val == h
		visibility hidden im
	else if val == c
		visibility collapse im
	else
		visibility val im

// z-index
// "z": "z-index:|;",
// "z:a": "z-index:auto;",
z(v, im = '')
	im = im == i ? !important :
	if v == a
		z-index auto im
	else
		z-index v



// Print
// Ruby
// Speech
// Table
// Text
// 2D/3D Transform
// Transition
// User-interface